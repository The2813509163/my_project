09/02 04:03:52 - OpenCompass - INFO - Task [Llama-3.2-3B_hf/gsm8k_0,Llama-3.2-3B_hf/math_0,Llama-3.2-3B_hf/svamp_0,Llama-3.2-3B_hf/piqa_0,Llama-3.2-3B_hf/siqa_0,Llama-3.2-3B_hf/squad2.0_0,Llama-3.2-3B_hf/ARC-c_0,Llama-3.2-3B_hf/ARC-e_0,Llama-3.2-3B_hf/lambada_0]
09/02 04:03:54 - OpenCompass - WARNING - pad_token_id is not set for the tokenizer.
09/02 04:03:54 - OpenCompass - WARNING - Using eos_token_id 128001 as pad_token_id.
Loading checkpoint shards:   0%|          | 0/2 [00:00<?, ?it/s]Loading checkpoint shards:  50%|█████     | 1/2 [00:01<00:01,  1.02s/it]Loading checkpoint shards: 100%|██████████| 2/2 [00:01<00:00,  1.62it/s]Loading checkpoint shards: 100%|██████████| 2/2 [00:01<00:00,  1.48it/s]
Some parameters are on the meta device because they were offloaded to the cpu.
Traceback (most recent call last):
  File "/home/kris/miniconda3/envs/opencompass-official/lib/python3.10/site-packages/opencompass/tasks/openicl_infer.py", line 161, in <module>
    inferencer.run()
  File "/home/kris/miniconda3/envs/opencompass-official/lib/python3.10/site-packages/opencompass/tasks/openicl_infer.py", line 73, in run
    self.model = build_model_from_cfg(model_cfg)
  File "/home/kris/miniconda3/envs/opencompass-official/lib/python3.10/site-packages/opencompass/utils/build.py", line 24, in build_model_from_cfg
    return MODELS.build(model_cfg)
  File "/home/kris/miniconda3/envs/opencompass-official/lib/python3.10/site-packages/mmengine/registry/registry.py", line 570, in build
    return self.build_func(cfg, *args, **kwargs, registry=self)
  File "/home/kris/miniconda3/envs/opencompass-official/lib/python3.10/site-packages/mmengine/registry/build_functions.py", line 121, in build_from_cfg
    obj = obj_cls(**args)  # type: ignore
  File "/home/kris/miniconda3/envs/opencompass-official/lib/python3.10/site-packages/opencompass/models/huggingface_above_v4_33.py", line 534, in __init__
    self._load_model(path=path, kwargs=model_kwargs, peft_path=peft_path, peft_kwargs=peft_kwargs)
  File "/home/kris/miniconda3/envs/opencompass-official/lib/python3.10/site-packages/opencompass/models/huggingface_above_v4_33.py", line 239, in _load_model
    self.model = PeftModel.from_pretrained(self.model, peft_path, **peft_kwargs)
  File "/home/kris/miniconda3/envs/opencompass-official/lib/python3.10/site-packages/peft/peft_model.py", line 541, in from_pretrained
    load_result = model.load_adapter(
  File "/home/kris/miniconda3/envs/opencompass-official/lib/python3.10/site-packages/peft/peft_model.py", line 1272, in load_adapter
    adapters_weights = load_peft_weights(model_id, device=torch_device, **hf_hub_download_kwargs)
  File "/home/kris/miniconda3/envs/opencompass-official/lib/python3.10/site-packages/peft/utils/save_and_load.py", line 567, in load_peft_weights
    adapters_weights = safe_load_file(filename, device=device)
  File "/home/kris/miniconda3/envs/opencompass-official/lib/python3.10/site-packages/safetensors/torch.py", line 315, in load_file
    result[k] = f.get_tensor(k)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 2.00 MiB. GPU 0 has a total capacity of 79.25 GiB of which 1.88 MiB is free. Process 4039786 has 76.33 GiB memory in use. Including non-PyTorch memory, this process has 2.89 GiB memory in use. Of the allocated memory 2.09 GiB is allocated by PyTorch, and 322.29 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
